// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reminders.sql

package data

import (
	"context"
)

const createReminder = `-- name: CreateReminder :one
INSERT INTO reminders(user_id, channel_id, guild_id, message, schedule, at_time, next_run, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, channel_id, guild_id, message, schedule, at_time, next_run, created_at, updated_at
`

type CreateReminderParams struct {
	UserID    string  `json:"user_id"`
	ChannelID string  `json:"channel_id"`
	GuildID   *string `json:"guild_id"`
	Message   string  `json:"message"`
	Schedule  string  `json:"schedule"`
	AtTime    *string `json:"at_time"`
	NextRun   int64   `json:"next_run"`
	CreatedAt int64   `json:"created_at"`
	UpdatedAt int64   `json:"updated_at"`
}

func (q *Queries) CreateReminder(ctx context.Context, db DBTX, arg CreateReminderParams) (Reminder, error) {
	row := db.QueryRowContext(ctx, createReminder,
		arg.UserID,
		arg.ChannelID,
		arg.GuildID,
		arg.Message,
		arg.Schedule,
		arg.AtTime,
		arg.NextRun,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.GuildID,
		&i.Message,
		&i.Schedule,
		&i.AtTime,
		&i.NextRun,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteByID = `-- name: DeleteByID :exec
DELETE FROM reminders WHERE id = ?
`

func (q *Queries) DeleteByID(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteByID, id)
	return err
}

const deleteOwned = `-- name: DeleteOwned :execrows
DELETE FROM reminders WHERE id = ? AND user_id = ?
`

func (q *Queries) DeleteOwned(ctx context.Context, db DBTX, iD int64, userID string) (int64, error) {
	result, err := db.ExecContext(ctx, deleteOwned, iD, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listByUser = `-- name: ListByUser :many
SELECT id, user_id, channel_id, guild_id, message, schedule, at_time, next_run, created_at, updated_at
FROM reminders
WHERE user_id = ?
ORDER BY next_run ASC
`

func (q *Queries) ListByUser(ctx context.Context, db DBTX, userID string) ([]Reminder, error) {
	rows, err := db.QueryContext(ctx, listByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reminder
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.GuildID,
			&i.Message,
			&i.Schedule,
			&i.AtTime,
			&i.NextRun,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDue = `-- name: ListDue :many
SELECT id, user_id, channel_id, guild_id, message, schedule, at_time, next_run, created_at, updated_at
FROM reminders
WHERE next_run <= ?
ORDER BY next_run ASC
LIMIT ?
`

func (q *Queries) ListDue(ctx context.Context, db DBTX, nextRun int64, limit int64) ([]Reminder, error) {
	rows, err := db.QueryContext(ctx, listDue, nextRun, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reminder
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.GuildID,
			&i.Message,
			&i.Schedule,
			&i.AtTime,
			&i.NextRun,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setNextRun = `-- name: SetNextRun :exec
UPDATE reminders SET next_run = ?, updated_at = ? WHERE id = ?
`

type SetNextRunParams struct {
	NextRun   int64 `json:"next_run"`
	UpdatedAt int64 `json:"updated_at"`
	ID        int64 `json:"id"`
}

func (q *Queries) SetNextRun(ctx context.Context, db DBTX, arg SetNextRunParams) error {
	_, err := db.ExecContext(ctx, setNextRun, arg.NextRun, arg.UpdatedAt, arg.ID)
	return err
}
